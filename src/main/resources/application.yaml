logging.level:
  root: ERROR
  no.fdk: DEBUG
application:
  fuseki:
    realm: fdk
    port: 8080
    context-path: fuseki
    store-path: store
    dataset-name: fdk
    enable-verbose-logging: false
  cors:
    working-directory: user.dir
    originPatterns: ${CORS_ORIGIN_PATTERNS}
  graph:
    datasets: ${GRAPH_BASE}/datasets
    dataservices: ${GRAPH_BASE}/dataservices
    concepts: ${GRAPH_BASE}/concepts
    informationmodels: ${GRAPH_BASE}/informationmodels
    events: ${GRAPH_BASE}/events
    services: ${GRAPH_BASE}/services
    uri: http://localhost:8080/fuseki/fdk
spring:
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false
    hibernate.ddl-auto: none
  datasource:
    driverClassName: org.postgresql.Driver
    url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    properties:
      schema.registry.url: ${KAFKA_SCHEMA_REGISTRY:http://localhost:8081}
      specific.avro.reader: true
      auto.register.schemas: false
      use.latest.version: true
      value.subject.name.strategy: io.confluent.kafka.serializers.subject.RecordNameStrategy
      key.subject.name.strategy: io.confluent.kafka.serializers.subject.RecordNameStrategy
    consumer:
      auto-offset-reset: earliest
      enable-auto-commit: false
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      max-poll-records: 500
    producer:
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
    listener:
      ack-mode: manual_immediate
resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 10
        failureRateThreshold: 50
        permittedNumberOfCallsInHalfOpenState: 3
        waitDurationInOpenState: 60000
        automaticTransitionFromOpenToHalfOpenEnabled: true
    instances:
      service-event-cb:.baseConfig: default
      event-event-db.baseConfig: default
      information-model-event-cb.baseConfig: default
      dataset-event-cb.baseConfig: default
      data-service-event-cb.baseConfig: default
      concept-event-cb.baseConfig: default

---
spring:
  config.activate.on-profile: dev
  datasource:
    url: jdbc:postgresql://localhost:5432/sparql_test
    username: postgres
    password: postgres
application:
  graph:
    datasets: https://staging.fellesdatakatalog.digdir.no/datasets
    dataservices: https://staging.fellesdatakatalog.digdir.no/dataservices
    concepts: https://staging.fellesdatakatalog.digdir.no/concepts
    informationmodels: https://staging.fellesdatakatalog.digdir.no/informationmodels
    events: https://staging.fellesdatakatalog.digdir.no/events
    services: https://staging.fellesdatakatalog.digdir.no/services
  cors:
    working-directory: java.io.tmpdir
    originPatterns: "*"
---
spring:
  config.activate.on-profile: test
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false
    hibernate.ddl-auto: create
  datasource:
    driverClassName: org.postgresql.Driver
    username: postgres
    password: postgres
application:
  graph:
    datasets: https://staging.fellesdatakatalog.digdir.no/datasets
    dataservices: https://staging.fellesdatakatalog.digdir.no/dataservices
    concepts: https://staging.fellesdatakatalog.digdir.no/concepts
    informationmodels: https://staging.fellesdatakatalog.digdir.no/informationmodels
    events: https://staging.fellesdatakatalog.digdir.no/events
    services: https://staging.fellesdatakatalog.digdir.no/services
  cors:
    working-directory: java.io.tmpdir
    originPatterns: "*"
